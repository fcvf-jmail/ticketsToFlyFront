const { default: axios } = require("axios");
const { Scenes } = require("telegraf");

cancelButton = {text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancelDeleting"}

const deleteSubscriptionScene = new Scenes.BaseScene("deleteSubscriptionScene")

deleteSubscriptionScene.enter(async ctx => {
    var inlineKeyboard = [];
    const subscriptions = await (await axios.get(`http://localhost:1728/api/Subscription/User/${ctx.from.id}`)).data
    
    if(subscriptions.length == 0) return await ctx.reply("üßê –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", {reply_markup: {inline_keyboard: [[{text: "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "createSubscription"}], [cancelButton]]}})
    ctx.scene.session.state[ctx.from.id] = {subscriptions}
    console.log(subscriptions)
    subscriptions.forEach((subscription, index) => {
        var text = subscription.departureLocation.city
        if(subscription.departureLocation.airport) text += ` (${subscription.departureLocation.airport})`
        
        text += ` - ${subscription.destinationLocation.city}`
        if(subscription.destinationLocation.airport) text += ` (${subscription.departureLocation.airport})`

        inlineKeyboard.push([{text, callback_data: `subscription ${subscription.id}`}])
    });

    inlineKeyboard.push([cancelButton])

    ctx.reply("–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å", {reply_markup: {inline_keyboard: inlineKeyboard}})
})

deleteSubscriptionScene.action("cancelDeleting", async ctx => {
    await ctx.reply("‚õîÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ\nüë£ –î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start")
    ctx.scene.leave()
})

deleteSubscriptionScene.action(/subscription /ig, async ctx => {
    const subscriptionId = ctx.callbackQuery.data.replace("subscription ", "")
    const subscription = ctx.scene.session.state[ctx.from.id].subscriptions.find(subscription => subscription.id == subscriptionId);

    const startDate = new Date(subscription.fromDate)
    const endDate = new Date(subscription.toDate)
    
    const startDateString = startDate.toLocaleString("ru-Ru", {day: "2-digit", month: "2-digit", year: "numeric"})
    const endDateString = endDate.toLocaleString("ru-Ru", {day: "2-digit", month: "2-digit", year: "numeric"})

    var dateRange = `${startDateString} - ${endDateString}`

    var hourWord = "—á–∞—Å"

    if(subscription?.maxFlightDuration) {
        var lastChar = subscription.maxFlightDuration % 10
    
        if(lastChar == 1 && subscription.maxFlightDuration != 11) hourWord = "—á–∞—Å"
        else if(lastChar >= 2 && lastChar <= 4 && subscription.maxFlightDuration.toString()[0] != "1") hourWord = "—á–∞—Å–∞"
        else if(lastChar >= 5 || subscription.maxFlightDuration >= 10) hourWord = "—á–∞—Å–æ–≤"
    }

    await ctx.reply(
        `üìÑ –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
        `üåÉ –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞: ${subscription.departureLocation.city}${subscription.departureLocation.airport ? ` (${subscription.departureLocation.airport})` : ""}\n` +
        `üåá –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${subscription.destinationLocation.city}${subscription.destinationLocation.airport ? ` (${subscription.destinationLocation.airport})` : ""}\n` +
        `üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç: ${dateRange}\n` +
        (subscription.maxPrice ? `üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${subscription.maxPrice} —Ä—É–±\n`: "") +
        (subscription.minBaggageWeight ? `üéí –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –±–∞–≥–∞–∂–∞: ${subscription.minBaggageWeight} –∫–≥\n` : "") +
        (subscription.minHandBaggageWeight ? `üëú –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏: ${subscription.minHandBaggageWeight} –∫–≥\n` : "") +
        (subscription.maxTransfersCount ? `üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫: ${subscription.maxTransfersCount}\n` : "") +
        (subscription.maxFlightDuration ? `‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ—Ç–µ: ${subscription.maxFlightDuration} ${hourWord}\n` : "") +
        `\n–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?`,
        { parse_mode: "HTML", reply_markup: {inline_keyboard: [[{text: "–î–∞", callback_data: `delete ${subscriptionId}`}], [{text: "üîô –ù–∞–∑–∞–¥", callback_data: "backToSubscriptionChoise"}]]}}
    );
})

deleteSubscriptionScene.action("backToSubscriptionChoise", ctx => ctx.scene.enter("deleteSubscriptionScene"))

deleteSubscriptionScene.action(/delete /ig, async ctx => {
    var subscriptionId = ctx.callbackQuery.data.replace("delete ", "")
    await axios.delete(`http://localhost:1728/api/Subscription/${subscriptionId}`)
    return await ctx.reply("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", {reply_markup: {inline_keyboard: [[{text: "üîô –ù–∞–∑–∞–¥", callback_data: "backToSubscriptionChoise"}]]}})
})

module.exports = { deleteSubscriptionScene }