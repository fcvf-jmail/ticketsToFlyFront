const cancelButton = {text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancelSubscription"}
const backButton = {text: "üîô –ù–∞–∑–∞–¥", callback_data: "back"}
const filterKeyboard = [
    [{ text: "üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", callback_data: "setMaxPrice" }],
    [{ text: "üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –±–∞–≥–∞–∂–∞", callback_data: "setMinBaggage" }],
    [{ text: "üß≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏", callback_data: "setMinHandBaggage" }],
    [{ text: "üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫", callback_data: "setTransfers" }],
    [{ text: "‚è≥ –í—Ä–µ–º—è –≤ –ø–æ–ª–µ—Ç–µ", callback_data: "setFlightTime" }],
    [{ text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data: "finishSubscription" }],
    [cancelButton]
]

const editSubscriptionScene = new Scenes.BaseScene("editSubscriptionScene")

editSubscriptionScene.enter(async ctx => {
    console.log(ctx.scene.session.state)
    console.log(ctx.scene.session.state[ctx.from.id].ticketInfo.filters)
    await ctx.reply("üéõ –í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤:\n\n–£–∫–∞–∂–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —á—Ç–æ–±—ã —è –Ω–∞—à–µ–ª –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω—ã–π –±–∏–ª–µ—Ç!", { reply_markup: { inline_keyboard: filterKeyboard, resize_keyboard: true }});
})

editSubscriptionScene.action("back", async ctx => {
    return await ctx.scene.enter("editSubscriptionScene", ctx.scene.session.state)
})

editSubscriptionScene.action("cancelSubscription", async ctx => {
    return await cancelSubscription(ctx)
})

editSubscriptionScene.action("setMaxPrice", async ctx => {
    await ctx.reply("üí∞ –£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5000, 10000 –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±—é–¥–∂–µ—Ç", {reply_markup: {inline_keyboard: [[backButton]], resize_keyboard: true}});
    ctx.scene.session.state[ctx.from.id].ticketInfo.setting = "maxPrice";
})

editSubscriptionScene.action("setMinBaggage", async ctx => {
    await ctx.reply(`üì¶ –£–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –±–∞–≥–∞–∂–∞ (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):\n\n–°–∫–∞–∂—É —Ç–µ–±–µ –ø–æ —Å–µ–∫—Ä–µ—Ç—É, —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Å –±–∞–≥–∞–∂–∞ ‚Äî 20 –∫–∏–ª–æ–≥—Ä–∞–º–º\n\n`, { parse_mode: "HTML", reply_markup: {inline_keyboard: [[backButton]], resize_keyboard: true}});
    ctx.scene.session.state[ctx.from.id].ticketInfo.setting = "minBaggage";
})

editSubscriptionScene.action("setMinHandBaggage", async ctx => {
    await ctx.reply(`üß≥ –£–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏ (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):\n\n–§–∞–Ω —Ñ–∞–∫—Ç: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5 –∫–∏–ª–æ–≥—Ä–∞–º`, { parse_mode: "HTML", reply_markup: {inline_keyboard: [[backButton]], resize_keyboard: true}});
    ctx.scene.session.state[ctx.from.id].ticketInfo.setting = "minHandBaggage";
})

editSubscriptionScene.action("setTransfers", async ctx => {
    await ctx.reply("üîÅ –£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 0 (–±–µ–∑ –ø–µ—Ä–µ—Å–∞–¥–æ–∫), 1 (–æ–¥–Ω–∞ –ø–µ—Ä–µ—Å–∞–¥–∫–∞) –∏–ª–∏ 2 (–¥–≤–µ –ø–µ—Ä–µ—Å–∞–¥–∫–∏)", {reply_markup: {inline_keyboard: [[backButton]], resize_keyboard: true}});
    ctx.scene.session.state[ctx.from.id].ticketInfo.setting = "transfers";
})

editSubscriptionScene.action("setFlightTime", async ctx => {
    await ctx.reply("‚è≥ –£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ—Ç–µ (–≤ —á–∞—Å–∞—Ö):\n\n –ù–∞–ø—Ä–∏–º–µ—Ä: 4, 6 –∏–ª–∏ 8 —á–∞—Å–æ–≤", {reply_markup: {inline_keyboard: [[backButton]], resize_keyboard: true}});
    ctx.scene.session.state[ctx.from.id].ticketInfo.setting = "flightTime";
})

editSubscriptionScene.action("finishSubscription", async ctx => {
    var hourWord = "—á–∞—Å"

    if(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.flightTime) {
        var lastChar = ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime % 10
    
        if(lastChar == 1 && ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime != 11) hourWord = "—á–∞—Å"
        else if(lastChar >= 2 && lastChar <= 4 && ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime.toString()[0] != "1") hourWord = "—á–∞—Å–∞"
        else if(lastChar >= 5 || ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime >= 10) hourWord = "—á–∞—Å–æ–≤"
    }
    
    var departureAirportString = await getAirportStringByCode(ctx.scene.session.state[ctx.from.id].ticketInfo.departureCode) 
    var destinationAirportString = await getAirportStringByCode(ctx.scene.session.state[ctx.from.id].ticketInfo.destinationCode) 

    await ctx.reply(
        `üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìÑ –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n` +
        `üåÉ –ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞: ${departureAirportString}\n` +
        `üåá –ì–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è: ${destinationAirportString}\n` +
        `üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç: ${ctx.scene.state[ctx.from.id].ticketInfo.dateRange}\n` +
        (ctx.scene.state[ctx.from.id].ticketInfo?.filters?.maxPrice ? `üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${ctx.scene.state[ctx.from.id].ticketInfo?.filters?.maxPrice} —Ä—É–±\n`: "") +
        (ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minBaggage ? `üéí –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –±–∞–≥–∞–∂–∞: ${ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minBaggage} –∫–≥\n` : "") +
        (ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minHandBaggage ? `üëú –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏: ${ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minHandBaggage} –∫–≥\n` : "") +
        (ctx.scene.state[ctx.from.id].ticketInfo?.filters?.transfers ? `üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫: ${ctx.scene.state[ctx.from.id].ticketInfo?.filters?.transfers}\n` : "") +
        (ctx.scene.state[ctx.from.id].ticketInfo?.filters?.flightTime ? `‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ—Ç–µ: ${ctx.scene.state[ctx.from.id].ticketInfo?.filters?.flightTime} ${hourWord}\n` : "") +
        `\nüöÄ –£–∂–µ –∏—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –±–∏–ª–µ—Ç—ã. –û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!`,
        { parse_mode: "HTML" }
    );
    
    const subscription = {
        ChatId: ctx.from.id.toString(),
        FromDate: ctx.scene.session.state[ctx.from.id].ticketInfo.startDate, 
        ToDate: ctx.scene.session.state[ctx.from.id].ticketInfo.endDate, 
        DepartureCode: ctx.scene.session.state[ctx.from.id].ticketInfo.departureCode, 
        DestinationCode: ctx.scene.session.state[ctx.from.id].ticketInfo.destinationCode, 
        MaxPrice: Number(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.maxPrice),
        MinBaggageWeight: Number(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minBaggage), 
        MinHandBaggageWeight: Number(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.minHandBaggage), 
        MaxTransfersCount: Number(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.transfers), 
        MaxFlightDuration: Number(ctx.scene.state[ctx.from.id].ticketInfo?.filters?.flightTime)
    }

    console.log(subscription)

    await sendSubscriptionToDb(subscription)

    return ctx.scene.leave();
})

editSubscriptionScene.on(message("text"), async ctx => {
    const setting = ctx.scene.session.state[ctx.from.id].ticketInfo.setting;
    if(!ctx.scene.state[ctx.from.id].ticketInfo.filters) ctx.scene.state[ctx.from.id].ticketInfo.filters = {}
    var value = ctx.message.text

    const settingNameToValidateErrorText = {
        maxPrice: "üí∏ –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑",
        minBaggage: "üéí –í–µ—Å –±–∞–≥–∞–∂–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞",
        minHandBaggage: "üëú –í–µ—Å —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ",
        transfers: "ü™Ω –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å–∞–¥–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
        flightTime: "‚è±Ô∏è –í—Ä–µ–º—è –≤ –ø–æ–ª–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–Ω–æ–≤–∞"
    }

    if(!(await stringIsInteger(value))) return await ctx.reply(settingNameToValidateErrorText[setting], {reply_markup: {inline_keyboard: [[backButton]]}})

    ctx.scene.state[ctx.from.id].ticketInfo.filters[setting] = value;

    var amountWord = await getAmountWordForm(ctx)
    var hourWord = await getHourWordForm(ctx)
    
    const filterNameToMessageName = {
        maxPrice: `üí∏ –¢—É—Ç —Ç—ã –ø—Ä–∞–≤, –¥–∞–∂–µ —à—É—à–∞—Ä–∞ –≤—Ä—è–¥ –ª–∏ –≥–æ—Ç–æ–≤–∞ –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ ${value} –∑–∞ –±–∏–ª–µ—Ç`,
        minBaggage: `üéí –°–æ–≥–ª–∞—Å–µ–Ω, –±—Ä–∞—Ç—å —Å —Å–æ–±–æ–π –≤ –ø–æ–ª–µ—Ç –º–µ–Ω—å—à–µ ${value} –∫–≥ –±–∞–≥–∞–∂–∞ –ø—Ä–æ—Å—Ç–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ`,
        minHandBaggage: `üëú –ö–∞–∫ –≤–æ–æ–±—â–µ –º–æ–∂–Ω–æ —Å–∏–¥–µ—Ç—å –≤ —Å–∞–º–æ–ª–µ—Ç–µ, –µ—Å–ª–∏ —É —Ç–µ–±—è —Å —Å–æ–±–æ–π –Ω–µ—Ç ${value} –∫–≥ —Ä—É—á–Ω–æ–π –∫–ª–∞–¥–∏?`,
        transfers: `ü™Ω –ú—ã –∂–µ –Ω–∞ —Å–∞–º–æ–ª–µ—Ç–µ –ª–µ—Ç–∏–º, –∞ –Ω–µ –ø–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º –≥—É–ª—è–µ–º. –î–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ ${value} ${amountWord} —ç—Ç–æ –ø–æ–ª–Ω—ã–π –±—Ä–µ–¥`,
        flightTime: `‚è±Ô∏è –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ –ø–æ–ª–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ ${value} ${hourWord}? –í –Ω–∞—Ä–¥—ã –∏–≥—Ä–∞—Ç—å? –°–º–æ—Ç—Ä–µ—Ç—å –°–∞–Ω—Ç–∞-–ë–∞—Ä–±–∞—Ä—É?`
    }
    
    await ctx.reply(`${filterNameToMessageName[setting]}\n\n‚ú® –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥–ø–∏—Å–∫–∏`, {reply_markup: {inline_keyboard: filterKeyboard, resize_keyboard: true}});
})

async function stringIsInteger(str) {
    return /^-?\d+$/.test(str)
}


async function getAmountWordForm(ctx) {
    var lastCharTransfer = ctx.scene.state[ctx.from.id].ticketInfo.filters.transfers % 10
    var amountWord = ""
    if(lastCharTransfer == 1 && ctx.scene.state[ctx.from.id].ticketInfo.filters.transfers != 11) amountWord = "–ø–µ—Ä–µ—Å–∞–¥–∫–∏"
    else if(lastCharTransfer >= 2 && lastCharTransfer <= 4 && ctx.scene.state[ctx.from.id].ticketInfo.filters.transfers.toString()[0] != "1") amountWord = "–ø–µ—Ä–µ—Å–∞–¥–æ–∫"
    return amountWord    
}

async function getHourWordForm(ctx) {
    var lastChar = ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime % 10
    var hourWord = ""
    
    if(lastChar == 1 && ctx.scene.state[ctx.from.id].ticketInfo.filters.flightTime != 11) hourWord = "—á–∞—Å–∞"
    else if(lastChar >= 2) hourWord = "—á–∞—Å–æ–≤"
    return hourWord
}

async function getAirportStringByCode(code) {
    // –ó–∞–ø—Ä–æ—Å –∫ –±–¥ –ø–æ –∫–æ–¥—É
    // –ë–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {Id, Code, Country, City, Airport}

    var response = {Country: "—Ñ—Ä–∞–Ω—Ü–∏—è", City: "—Å—Ç—Ä–∞–∑–±—É—Ä–≥", Airport: "—Ö–∑ –∫–∞–∫–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç –≤ —Å—Ç—Ä–∞–∑–±—É—Ä–≥–µ"}

    var country = response.Country
    var city = response.City
    var airport = response.Airport

    var string = `${country}, ${city} (${airport ? airport : "–õ—é–±–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç"})`

    return string
}

async function sendSubscriptionToDb(subscription) {
    // –ó–∞–ø—Ä–æ—Å –∫ –±–¥ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é
    const filteredSubscription = Object.fromEntries( Object.entries(subscription).filter(([_, value]) => value != null && value.toString() != "NaN"));
    console.log(filteredSubscription)
    await axios.post("http://localhost:5000/api/Subscription", filteredSubscription)
}

module.exports = {  }