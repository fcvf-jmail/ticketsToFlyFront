const axios = require("axios")
const { Scenes, Markup } = require("telegraf");
const { message } = require("telegraf/filters");
const { cancelSubscription } = require("../functions");

const backButton = {text: "üîô –ù–∞–∑–∞–¥", callback_data: "back"}
const cancelButton = {text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancelSubscription"}

const getDateIntervalScene = new Scenes.BaseScene("getDateIntervalScene")

getDateIntervalScene.enter(async ctx => {
    console.log(ctx.scene.session.state)
    await ctx.reply("üìÖ –£–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî 7 –¥–Ω–µ–π!", { parse_mode: "HTML", reply_markup: {inline_keyboard: [[backButton], [cancelButton]], resize_keyboard: true} });
})

getDateIntervalScene.action("cancelSubscription", async ctx => {
    return await cancelSubscription(ctx)
})

getDateIntervalScene.action("back", async ctx => {
    return ctx.scene.enter("getDestinationScene", ctx.scene.session.state)
})

getDateIntervalScene.on(message("text"), async ctx => {
    const { startDateString, endDateString, errorMessage } = await validateDate(ctx.message.text)
    if(errorMessage) return await ctx.reply(errorMessage)

    ctx.scene.session.state[ctx.from.id].ticketInfo.startDate = startDateString
    ctx.scene.session.state[ctx.from.id].ticketInfo.endDate = endDateString

    ctx.scene.state[ctx.from.id].ticketInfo.dateRange = ctx.message.text
    
    console.log(ctx.scene.session.state[ctx.from.id].ticketInfo)
    return ctx.scene.enter("getFiltersScene", ctx.scene.session.state)
})

async function validateDate(dateString) {
    var writeNewDateText = "üìÖ –£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`–¥–¥.–º–º.–≥–≥–≥–≥ - –¥–¥.–º–º.–≥–≥–≥–≥`"

    const regex = /^(\d{2})\.(\d{2})\.(\d{4}) - (\d{2})\.(\d{2})\.(\d{4})$/;
    const match = dateString.match(regex);

    if (!match) return { errorMessage: `‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n${writeNewDateText}` }

    const startDate = new Date(`${match[3]}-${match[2]}-${match[1]}`);
    const endDate = new Date(`${match[6]}-${match[5]}-${match[4]}`);

    console.log(startDate)
    console.log(endDate)

    const startDateString = match.input.split(" - ")[0]
    const endDateString = match.input.split(" - ")[1]

    if(startDate.toString() == "Invalid Date") return { errorMessage: `‚ö†Ô∏è ${match.input.split(" - ")[0]} - —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n${writeNewDateText}` }
    if(endDate.toString() == "Invalid Date") return { errorMessage: `‚ö†Ô∏è ${match.input.split(" - ")[1]} - —Ç–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n${writeNewDateText}` }

    const today = new Date()
    today.setHours(0)
    today.setMinutes(0)
    today.setMilliseconds(0)

    if(startDate < today) return { errorMessage: `‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è\n\n${writeNewDateText}` }

    var endDateIsFurtherThenOneYear = ((endDate - today) / (1000 * 3600 * 24)) > 365
    if(endDateIsFurtherThenOneYear) return { errorMessage: `‚ö†Ô∏è –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –≥–æ–¥ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π\n\n${writeNewDateText}` }

    const diffTime = endDate - startDate;
    const diffDays = diffTime / (1000 * 3600 * 24);

    console.log(diffDays)

    if (diffDays < 0) return { errorMessage: `‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–Ω–µ—á–Ω–æ–π\n\n${writeNewDateText}` }
    if (diffDays > 7) return { errorMessage: `‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî 7 –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª\n\n${writeNewDateText}` }

    return { startDateString, endDateString }
}

module.exports = { getDateIntervalScene }